import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import { useExperiences } from '../hooks/useExperiences'
import ApplicationFormModal from '../components/ApplicationFormModal'
import ReviewSubmissionManager from '../components/ReviewSubmissionManager'
import {Calendar, Gift, Clock, Star, MapPin, ArrowLeft, CheckCircle, XCircle, AlertCircle, ShoppingCart, Newspaper, Building, Target, Hash, Link, Info, CalendarDays, UserCheck, Megaphone, Users} from 'lucide-react'
import toast from 'react-hot-toast'


// 🔥 체험단 타입 정보
const EXPERIENCE_TYPES = {
  purchase_review: {
    label: '구매평',
    color: 'bg-orange-100 text-orange-800',
    icon: ShoppingCart,
    description: '제품을 직접 구매하고 솔직한 구매평을 작성하는 캠페인입니다.'
  },
  product: {
    label: '제품 체험',
    color: 'bg-blue-100 text-blue-800',
    icon: Gift,
    description: '제품을 체험하고 솔직한 후기를 작성하는 캠페인입니다.'
  },
  press: {
    label: '기자단',
    color: 'bg-purple-100 text-purple-800',
    icon: Newspaper,
    description: '언론 매체를 통해 제품을 소개하는 캠페인입니다.'
  },
  local: {
    label: '지역 체험',
    color: 'bg-green-100 text-green-800',
    icon: Building,
    description: '지역 특색을 살린 체험 콘텐츠를 제작하는 캠페인입니다.'
  }
}

function ExperienceDetail() {
  const { id } = useParams()
  const navigate = useNavigate()
  const { user, isAuthenticated } = useAuth()
  const { getCampaignById, applyForCampaign, getUserApplications, cancelApplication } = useExperiences()
  
  const [loading, setLoading] = useState(true)
  const [experience, setExperience] = useState<any>(null)
  const [userApplication, setUserApplication] = useState<any>(null)
  const [showApplicationModal, setShowApplicationModal] = useState(false)
  const [showReviewModal, setShowReviewModal] = useState(false)
  const [checkingApplication, setCheckingApplication] = useState(false)
  const [isApplicationClosed, setIsApplicationClosed] = useState(false)

  // 자동 스크롤 함수
  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId)
    if (element) {
      element.scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
      })
    }
  }

  // 체험단 정보 로드
  useEffect(() => {
    const loadExperience = async () => {
      if (!id) return
      
      try {
        console.log('🔍 체험단 상세 정보 로딩:', id)
        const experienceData = await getCampaignById(id)
        setExperience(experienceData)
        
        // 🔥 캠페인 상태 체크
        const campaignStatus = experienceData?.campaign_status || 'recruiting'
        
        if (campaignStatus === 'recruitment_completed' || campaignStatus === 'campaign_ended') {
          setIsApplicationClosed(true)
          console.log('🚫 캠페인 상태로 인한 신청 마감:', campaignStatus)
        } else if (experienceData && experienceData.max_participants) {
          // 🔥 정확한 지원자 수 체크
          const applications = await getUserApplications() || []
          const experienceApplications = applications.filter((app: any) => 
            app.experience_id === experienceData._id || app.experience_id === experienceData.id
          )
          
          console.log('🔍 신청자 체크:', {
            maxParticipants: experienceData.max_participants,
            currentApplications: experienceApplications.length,
            applications: experienceApplications
          })
          
          if (experienceApplications.length >= experienceData.max_participants) {
            setIsApplicationClosed(true)
            console.log('🚫 최대 참가자 수 도달로 인한 신청 마감')
          }
        }
        
        console.log('✅ 체험단 상세 정보 로드 완료:', experienceData)
      } catch (error) {
        console.error('❌ 체험단 정보 로드 실패:', error)
        toast.error('체험단 정보를 불러오는데 실패했습니다.')
      } finally {
        setLoading(false)
      }
    }

    loadExperience()
  }, [id, getCampaignById, getUserApplications])

  // 사용자 신청 상태 확인
  useEffect(() => {
    const checkApplicationStatus = async () => {
      if (!user?.user_id || !experience) return
      
      try {
        console.log('🔍 신청 상태 확인:', { userId: user.user_id, experienceId: experience._id })
        
        const applications = await getUserApplications(user.user_id, true) // 강제 새로고침
        const userApp = applications.find((app: any) => 
          app.experience_id === experience._id || app.experience_id === experience.id
        )
        
        if (userApp) {
          console.log('✅ 기존 신청 발견:', userApp)
          setUserApplication(userApp)
        } else {
          console.log('ℹ️ 신청 내역 없음')
          setUserApplication(null)
        }
      } catch (error) {
        console.error('❌ 신청 상태 확인 실패:', error)
      }
    }

    checkApplicationStatus()
  }, [user, experience, getUserApplications])

  const handleApplyClick = () => {
    if (!isAuthenticated) {
      toast.error('로그인이 필요합니다.')
      navigate('/login')
      return
    }
    setShowApplicationModal(true)
  }

  const handleCancelApplication = async () => {
    if (!userApplication || !user?.user_id) return

    if (!confirm('정말로 신청을 취소하시겠습니까?')) return

    try {
      setCheckingApplication(true)
      await cancelApplication(userApplication._id || userApplication.id)
      setUserApplication(null)
      toast.success('신청이 취소되었습니다.')
      
      // 🔥 강제 새로고침
      const applications = await getUserApplications(user.user_id, true)
      const updatedApp = applications.find((app: any) => 
        app.experience_id === experience._id
      )
      setUserApplication(updatedApp || null)
    } catch (error) {
      console.error('❌ 신청 취소 실패:', error)
      toast.error('신청 취소에 실패했습니다.')
    } finally {
      setCheckingApplication(false)
    }
  }

  const handleReviewClick = () => {
    if (!userApplication) {
      toast.error('신청 정보를 찾을 수 없습니다.')
      return
    }
    setShowReviewModal(true)
  }

  // 🔥 액션 버튼 렌더링 함수
  const renderActionButtons = () => {
    if (!isAuthenticated) {
      return (
        <div className="text-center py-8">
          <p className="text-gray-600 mb-4">체험단에 참여하려면 로그인이 필요합니다.</p>
          <button
            onClick={() => navigate('/login')}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
          >
            로그인하기
          </button>
        </div>
      )
    }

    if (!experience) {
      return (
        <div className="text-center py-4">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <p className="text-gray-600">체험단 정보 로딩 중...</p>
        </div>
      )
    }

    if (!user?.user_id) {
      return (
        <div className="text-center py-8">
          <p className="text-gray-600 mb-4">사용자 정보를 확인할 수 없습니다.</p>
          <button
            onClick={() => navigate('/login')}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
          >
            다시 로그인하기
          </button>
        </div>
      )
    }

    if (checkingApplication) {
      return (
        <div className="text-center py-4">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <p className="text-gray-600">신청 상태 확인 중...</p>
        </div>
      )
    }

    if (userApplication) {
      const status = userApplication.status
      
      return (
        <div className="space-y-4">
          {/* 신청 상태 표시 */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <h4 className="font-medium text-blue-900">신청 상태</h4>
                <p className="text-sm text-blue-700 mt-1">
                  {status === 'pending' && '승인 대기 중입니다'}
                  {status === 'approved' && '승인되었습니다! 체험 가이드를 확인해주세요'}
                  {status === 'rejected' && '승인이 거절되었습니다'}
                  {status === 'in_progress' && '체험 진행 중입니다'}
                  {status === 'review_submitted' && '리뷰 제출 완료! 검수 중입니다'}
                  {status === 'completed' && '체험 완료되었습니다'}
                </p>
              </div>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                status === 'approved' ? 'bg-green-100 text-green-800' :
                status === 'rejected' ? 'bg-red-100 text-red-800' :
                status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                status === 'review_submitted' ? 'bg-purple-100 text-purple-800' :
                status === 'completed' ? 'bg-emerald-100 text-emerald-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {status === 'pending' && '승인 대기'}
                {status === 'approved' && '승인 완료'}
                {status === 'rejected' && '승인 거절'}
                {status === 'in_progress' && '진행 중'}
                {status === 'review_submitted' && '리뷰 제출'}
                {status === 'completed' && '완료'}
              </span>
            </div>
          </div>

          {/* 액션 버튼들 */}
          <div className="flex flex-col sm:flex-row gap-3">
            {/* 내 신청 현황 보기 */}
            <button
              onClick={() => navigate('/my-applications')}
              className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium"
            >
              내 신청 현황 보기
            </button>
            
            {/* 리뷰 작성 버튼 - 승인된 경우만 표시 */}
            {(status === 'approved' || status === 'in_progress') && (
              <button
                onClick={handleReviewClick}
                className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                리뷰 작성하기
              </button>
            )}

            {/* 추가 리뷰 작성 - 리뷰 제출 후에도 가능 */}
            {(status === 'review_submitted' || status === 'completed') && (
              <button
                onClick={handleReviewClick}
                className="flex-1 px-6 py-3 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors font-medium"
              >
                추가 리뷰 작성
              </button>
            )}
          </div>

          {/* 승인 후 안내 메시지 */}
          {status === 'approved' && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-start">
                <CheckCircle className="w-5 h-5 text-green-600 mt-0.5 mr-3 flex-shrink-0" />
                <div className="text-sm text-green-800">
                  <p className="font-medium mb-1">🎉 체험단 승인 완료!</p>
                  <ul className="list-disc list-inside space-y-1 text-xs">
                    <li>체험 가이드라인을 이메일로 발송해드렸습니다</li>
                    <li>체험 완료 후 리뷰를 작성해주세요</li>
                    <li>리뷰 승인 시 포인트가 지급됩니다</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {/* 신청 취소 버튼 - 승인 전에만 표시 */}
          {status === 'pending' && (
            <div className="pt-4 border-t border-gray-200">
              <button
                onClick={handleCancelApplication}
                disabled={checkingApplication}
                className="w-full px-4 py-2 text-sm text-red-600 border border-red-300 rounded-lg hover:bg-red-50 transition-colors disabled:opacity-50"
              >
                {checkingApplication ? '처리 중...' : '신청 취소'}
              </button>
            </div>
          )}
        </div>
      )
    }

    // 신청하지 않은 경우
    return (
      <div className="flex flex-col sm:flex-row gap-4">
        {isApplicationClosed ? (
          <button
            disabled
            className="flex-1 px-8 py-4 bg-gray-400 text-white rounded-lg cursor-not-allowed font-medium text-lg"
          >
            {experience?.campaign_status === 'recruitment_completed' ? '모집완료' : 
             experience?.campaign_status === 'campaign_ended' ? '캠페인 종료' : '신청 마감'}
          </button>
        ) : (
          <button
            onClick={handleApplyClick}
            className="flex-1 px-8 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium text-lg"
          >
            체험단 신청하기
          </button>
        )}
      </div>
    )
  }

  if (loading || !experience) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">체험단 정보를 불러오는 중...</p>
        </div>
      </div>
    )
  }

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'active':
        return {
          label: '모집중',
          color: 'bg-green-100 text-green-800',
          icon: CheckCircle
        }
      case 'closed':
        return {
          label: '마감',
          color: 'bg-red-100 text-red-800',
          icon: XCircle
        }
      case 'pending':
        return {
          label: '대기중',
          color: 'bg-yellow-100 text-yellow-800',
          icon: Clock
        }
      default:
        return {
          label: '알 수 없음',
          color: 'bg-gray-100 text-gray-800',
          icon: AlertCircle
        }
    }
  }

  const statusInfo = getStatusInfo(experience.status || 'active')
  const StatusIcon = statusInfo.icon

  // 🔥 체험단 타입 정보
  const experienceType = experience.experience_type || 'purchase_review'
  const typeInfo = EXPERIENCE_TYPES[experienceType as keyof typeof EXPERIENCE_TYPES]
  const TypeIcon = typeInfo?.icon || ShoppingCart

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* 뒤로가기 버튼 */}
        <button
          onClick={() => navigate(-1)}
          className="flex items-center text-gray-600 hover:text-gray-900 mb-6 transition-colors"
        >
          <ArrowLeft className="w-5 h-5 mr-2" />
          뒤로가기
        </button>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* 메인 컨텐츠 */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
              {/* 체험단 이미지 */}
              <div className="aspect-video bg-gray-200 relative overflow-hidden">
                <img
                  src={experience.image_url || experience.main_image || 'https://images.pexels.com/photos/1181406/pexels-photo-1181406.jpeg'}
                  alt={experience.title || experience.experience_name || '체험단 이미지'}
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = 'https://images.pexels.com/photos/1181406/pexels-photo-1181406.jpeg'
                  }}
                />
                <div className="absolute top-4 left-4 flex space-x-2">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${statusInfo.color}`}>
                    <StatusIcon className="w-4 h-4 mr-1" />
                    {statusInfo.label}
                  </span>
                  {/* 🔥 체험단 타입 태그 */}
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${typeInfo?.color || 'bg-orange-100 text-orange-800'}`}>
                    <TypeIcon className="w-4 h-4 mr-1" />
                    {typeInfo?.label || '구매평'}
                  </span>
                </div>
              </div>

              {/* 체험단 정보 */}
              <div className="p-8">
                <div className="mb-6">
                  <h1 className="text-3xl font-bold text-gray-900 mb-4">
                    {experience.title || experience.experience_name || '체험단 제목'}
                  </h1>
                  <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                    <div className="flex items-center">
                      <Calendar className="w-4 h-4 mr-1" />
                      <span>모집마감: {experience.end_date ? new Date(experience.end_date).toLocaleDateString() : '상시모집'}</span>
                    </div>
                    <div className="flex items-center">
                      <Users className="w-4 h-4 mr-1" />
                      <span>모집인원: {experience.max_participants || '제한없음'}명</span>
                    </div>
                    <div className="flex items-center">
                      <Coins className="w-4 h-4 mr-1" />
                      <span>리워드: {experience.reward_points || 0}P</span>
                    </div>
                  </div>
                </div>

                {/* 🔥 체험단 타입별 안내 */}
                <div className="mb-8">
                  <div className={`p-4 rounded-lg border ${typeInfo?.color === 'bg-orange-100 text-orange-800' ? 'bg-orange-50 border-orange-200' : 
                    typeInfo?.color === 'bg-blue-100 text-blue-800' ? 'bg-blue-50 border-blue-200' :
                    typeInfo?.color === 'bg-purple-100 text-purple-800' ? 'bg-purple-50 border-purple-200' :
                    'bg-green-50 border-green-200'}`}>
                    <div className="flex items-start">
                      <TypeIcon className={`w-5 h-5 mt-0.5 mr-3 flex-shrink-0 ${
                        typeInfo?.color === 'bg-orange-100 text-orange-800' ? 'text-orange-600' : 
                        typeInfo?.color === 'bg-blue-100 text-blue-800' ? 'text-blue-600' :
                        typeInfo?.color === 'bg-purple-100 text-purple-800' ? 'text-purple-600' :
                        'text-green-600'
                      }`} />
                      <div>
                        <h3 className={`font-medium mb-1 ${
                          typeInfo?.color === 'bg-orange-100 text-orange-800' ? 'text-orange-900' : 
                          typeInfo?.color === 'bg-blue-100 text-blue-800' ? 'text-blue-900' :
                          typeInfo?.color === 'bg-purple-100 text-purple-800' ? 'text-purple-900' :
                          'text-green-900'
                        }`}>
                          {typeInfo?.label || '구매평'} 체험단
                        </h3>
                        <p className={`text-sm ${
                          typeInfo?.color === 'bg-orange-100 text-orange-800' ? 'text-orange-700' : 
                          typeInfo?.color === 'bg-blue-100 text-blue-800' ? 'text-blue-700' :
                          typeInfo?.color === 'bg-purple-100 text-purple-800' ? 'text-purple-700' :
                          'text-green-700'
                        }`}>
                          {typeInfo?.description || '제품을 체험하고 솔직한 후기를 작성하는 캠페인입니다.'}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 체험단 설명 */}
                <div className="mb-8">
                  <h2 className="text-xl font-bold text-gray-900 mb-4">체험단 소개</h2>
                  <div className="prose prose-gray max-w-none">
                    <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                      {experience.description || '체험단 설명이 없습니다.'}
                    </p>
                  </div>
                </div>

                {/* 캠페인 일정 정보 */}
                {(experience.application_start_date || experience.application_end_date || 
                  experience.influencer_announcement_date || experience.content_start_date || 
                  experience.content_end_date || experience.result_announcement_date) && (
                  <div className="mb-8">
                    <h2 className="text-xl font-bold text-gray-900 mb-4">캠페인 일정</h2>
                    <div className="bg-gray-50 rounded-lg p-6">
                      {/* 빠른 링크 */}
                      <div className="mb-4 pb-4 border-b border-gray-200">
                        <p className="text-sm font-medium text-gray-700 mb-2">빠른 링크:</p>
                        <div className="flex flex-wrap gap-2">
                          {experience.provided_items && (
                            <button
                              onClick={() => scrollToSection('provided-items')}
                              className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 hover:bg-green-200 transition-colors"
                            >
                              <Gift className="w-3 h-3 mr-1" />
                              제공내역
                            </button>
                          )}
                          {experience.campaign_mission && (
                            <button
                              onClick={() => scrollToSection('campaign-mission')}
                              className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors"
                            >
                              <Target className="w-3 h-3 mr-1" />
                              캠페인 미션
                            </button>
                          )}
                          {experience.keywords && (
                            <button
                              onClick={() => scrollToSection('keywords')}
                              className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 hover:bg-purple-200 transition-colors"
                            >
                              <Hash className="w-3 h-3 mr-1" />
                              키워드
                            </button>
                          )}
                          {experience.additional_guidelines && (
                            <button
                              onClick={() => scrollToSection('additional-guidelines')}
                              className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors"
                            >
                              <Info className="w-3 h-3 mr-1" />
                              추가 안내사항
                            </button>
                          )}
                        </div>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {/* 신청 기간 */}
                        {(experience.application_start_date || experience.application_end_date) && (
                          <div className="flex items-center space-x-3">
                            <Calendar className="w-5 h-5 text-blue-600" />
                            <div>
                              <p className="text-sm font-medium text-gray-900">캠페인 신청기간</p>
                              <p className="text-sm text-gray-600">
                                {experience.application_start_date && experience.application_end_date
                                  ? `${new Date(experience.application_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~ ${new Date(experience.application_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                                  : experience.application_start_date
                                    ? `${new Date(experience.application_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~`
                                    : `~ ${new Date(experience.application_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                                }
                              </p>
                            </div>
                          </div>
                        )}

                        {/* 인플루언서 발표 */}
                        {experience.influencer_announcement_date && (
                          <div className="flex items-center space-x-3">
                            <UserCheck className="w-5 h-5 text-green-600" />
                            <div>
                              <p className="text-sm font-medium text-gray-900">인플루언서 발표</p>
                              <p className="text-sm text-gray-600">
                                {new Date(experience.influencer_announcement_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}
                              </p>
                            </div>
                          </div>
                        )}

                        {/* 콘텐츠 등록기간 */}
                        {(experience.content_start_date || experience.content_end_date) && (
                          <div className="flex items-center space-x-3">
                            <CalendarDays className="w-5 h-5 text-purple-600" />
                            <div>
                              <p className="text-sm font-medium text-gray-900">콘텐츠 등록기간</p>
                              <p className="text-sm text-gray-600">
                                {experience.content_start_date && experience.content_end_date
                                  ? `${new Date(experience.content_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~ ${new Date(experience.content_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                                  : experience.content_start_date
                                    ? `${new Date(experience.content_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~`
                                    : `~ ${new Date(experience.content_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                                }
                              </p>
                            </div>
                          </div>
                        )}

                        {/* 캠페인 결과발표 */}
                        {experience.result_announcement_date && (
                          <div className="flex items-center space-x-3">
                            <Megaphone className="w-5 h-5 text-orange-600" />
                            <div>
                              <p className="text-sm font-medium text-gray-900">캠페인 결과발표</p>
                              <p className="text-sm text-gray-600">
                                {new Date(experience.result_announcement_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}
                              </p>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* 신청자 수 */}
                      {experience.current_applicants !== undefined && experience.max_participants && (
                        <div className="mt-4 pt-4 border-t border-gray-200">
                          <div className="flex items-center space-x-3">
                            <Users className="w-5 h-5 text-indigo-600" />
                            <div>
                              <p className="text-sm font-medium text-gray-900">신청자</p>
                              <p className="text-sm text-gray-600">
                                {experience.current_applicants} / {experience.max_participants}명
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* 리뷰넷 스타일 상세 정보 섹션들 */}
                {experience.provided_items && (
                  <div id="provided-items" className="mb-8">
                    <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                      <Gift className="w-5 h-5 mr-2 text-green-600" />
                      제공내역
                    </h2>
                    <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                      <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                        {experience.provided_items}
                      </p>
                    </div>
                  </div>
                )}

                {experience.campaign_mission && (
                  <div id="campaign-mission" className="mb-8">
                    <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                      <Target className="w-5 h-5 mr-2 text-blue-600" />
                      캠페인 미션
                    </h2>
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                      <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                        {experience.campaign_mission}
                      </p>
                    </div>
                  </div>
                )}

                {experience.keywords && (
                  <div id="keywords" className="mb-8">
                    <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                      <Hash className="w-5 h-5 mr-2 text-purple-600" />
                      키워드
                    </h2>
                    <div className="bg-purple-50 border border-purple-200 rounded-lg p-6">
                      <div className="flex flex-wrap gap-2">
                        {experience.keywords.split(',').map((keyword: string, index: number) => (
                          <span
                            key={index}
                            className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800"
                          >
                            #{keyword.trim()}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {experience.product_links && (
                  <div className="mb-8">
                    <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                      <Link className="w-5 h-5 mr-2 text-indigo-600" />
                      링크
                    </h2>
                    <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-6">
                      <a
                        href={experience.product_links}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-indigo-600 hover:text-indigo-800 underline break-all"
                      >
                        {experience.product_links}
                      </a>
                    </div>
                  </div>
                )}

                {experience.additional_guidelines && (
                  <div id="additional-guidelines" className="mb-8">
                    <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                      <Info className="w-5 h-5 mr-2 text-gray-600" />
                      추가 안내사항
                    </h2>
                    <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                      <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                        {experience.additional_guidelines}
                      </p>
                    </div>
                  </div>
                )}

                {/* 참여 조건 */}
                <div className="mb-8">
                  <h2 className="text-xl font-bold text-gray-900 mb-4">참여 조건</h2>
                  <div className="bg-gray-50 rounded-lg p-6">
                    <ul className="space-y-2 text-gray-700">
                      {experienceType === 'purchase_review' ? (
                        <>
                          <li className="flex items-start">
                            <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span>네이버 계정 보유 (구매평 작성용)</span>
                          </li>
                          <li className="flex items-start">
                            <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span>제품 배송을 위한 정확한 연락처 및 주소</span>
                          </li>
                          <li className="flex items-start">
                            <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span>구매평 작성 후 스크린샷 제출</span>
                          </li>
                        </>
                      ) : (
                        <>
                          <li className="flex items-start">
                            <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span>SNS 계정 보유 (인스타그램, 유튜브, 블로그 등)</span>
                          </li>
                          <li className="flex items-start">
                            <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span>체험 후 솔직한 리뷰 작성</span>
                          </li>
                        </>
                      )}
                      <li className="flex items-start">
                        <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                        <span>가이드라인 준수</span>
                      </li>
                      {experience.additional_requirements && (
                        <li className="flex items-start">
                          <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                          <span>{experience.additional_requirements}</span>
                        </li>
                      )}
                    </ul>
                  </div>
                </div>

                {/* 액션 버튼 영역 */}
                <div className="border-t border-gray-200 pt-8">
                  {renderActionButtons()}
                </div>
            </div>
          </div>

          {/* 오른쪽 사이드바 */}
          <div className="lg:col-span-1">
            <div className="sticky top-8 space-y-6">
              {/* 캠페인 일정 정보 */}
              {(experience.application_start_date || experience.application_end_date || 
                experience.influencer_announcement_date || experience.content_start_date || 
                experience.content_end_date || experience.result_announcement_date || 
                experience.current_applicants !== undefined) && (
                <div className="bg-white rounded-xl shadow-sm p-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-4">캠페인 일정</h3>
                  <div className="space-y-4">
                    {/* 신청 기간 */}
                    {(experience.application_start_date || experience.application_end_date) && (
                      <div className="flex items-center justify-between py-2 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <Calendar className="w-4 h-4 text-blue-600" />
                          <span className="text-sm font-medium text-gray-700">캠페인 신청기간</span>
                        </div>
                        <span className="text-sm text-gray-600">
                          {experience.application_start_date && experience.application_end_date
                            ? `${new Date(experience.application_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~ ${new Date(experience.application_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                            : experience.application_start_date
                              ? `${new Date(experience.application_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~`
                              : `~ ${new Date(experience.application_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                          }
                        </span>
                      </div>
                    )}

                    {/* 인플루언서 발표 */}
                    {experience.influencer_announcement_date && (
                      <div className="flex items-center justify-between py-2 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <UserCheck className="w-4 h-4 text-green-600" />
                          <span className="text-sm font-medium text-gray-700">인플루언서 발표</span>
                        </div>
                        <span className="text-sm text-gray-600">
                          {new Date(experience.influencer_announcement_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}
                        </span>
                      </div>
                    )}

                    {/* 콘텐츠 등록기간 */}
                    {(experience.content_start_date || experience.content_end_date) && (
                      <div className="flex items-center justify-between py-2 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <CalendarDays className="w-4 h-4 text-purple-600" />
                          <span className="text-sm font-medium text-gray-700">콘텐츠 등록기간</span>
                        </div>
                        <span className="text-sm text-gray-600">
                          {experience.content_start_date && experience.content_end_date
                            ? `${new Date(experience.content_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~ ${new Date(experience.content_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                            : experience.content_start_date
                              ? `${new Date(experience.content_start_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })} ~`
                              : `~ ${new Date(experience.content_end_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}`
                          }
                        </span>
                      </div>
                    )}

                    {/* 캠페인 결과발표 */}
                    {experience.result_announcement_date && (
                      <div className="flex items-center justify-between py-2 border-b border-gray-100">
                        <div className="flex items-center space-x-2">
                          <Megaphone className="w-4 h-4 text-orange-600" />
                          <span className="text-sm font-medium text-gray-700">캠페인 결과발표</span>
                        </div>
                        <span className="text-sm text-gray-600">
                          {new Date(experience.result_announcement_date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}
                        </span>
                      </div>
                    )}

                    {/* 신청자 수 */}
                    {experience.current_applicants !== undefined && experience.max_participants && (
                      <div className="flex items-center justify-between py-2">
                        <div className="flex items-center space-x-2">
                          <Users className="w-4 h-4 text-indigo-600" />
                          <span className="text-sm font-medium text-gray-700">신청자</span>
                        </div>
                        <span className="text-sm text-gray-600">
                          {experience.current_applicants} / {experience.max_participants}명
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* 빠른 링크 */}
              {(experience.provided_items || experience.campaign_mission || 
                experience.keywords || experience.additional_guidelines) && (
                <div className="bg-white rounded-xl shadow-sm p-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-4">빠른 링크</h3>
                  <div className="space-y-2">
                    {experience.provided_items && (
                      <button
                        onClick={() => scrollToSection('provided-items')}
                        className="w-full text-left flex items-center space-x-3 p-3 rounded-lg hover:bg-green-50 transition-colors group"
                      >
                        <Gift className="w-4 h-4 text-green-600 group-hover:text-green-700" />
                        <span className="text-sm font-medium text-gray-700 group-hover:text-green-700">제공내역</span>
                      </button>
                    )}
                    {experience.campaign_mission && (
                      <button
                        onClick={() => scrollToSection('campaign-mission')}
                        className="w-full text-left flex items-center space-x-3 p-3 rounded-lg hover:bg-blue-50 transition-colors group"
                      >
                        <Target className="w-4 h-4 text-blue-600 group-hover:text-blue-700" />
                        <span className="text-sm font-medium text-gray-700 group-hover:text-blue-700">캠페인 미션</span>
                      </button>
                    )}
                    {experience.keywords && (
                      <button
                        onClick={() => scrollToSection('keywords')}
                        className="w-full text-left flex items-center space-x-3 p-3 rounded-lg hover:bg-purple-50 transition-colors group"
                      >
                        <Hash className="w-4 h-4 text-purple-600 group-hover:text-purple-700" />
                        <span className="text-sm font-medium text-gray-700 group-hover:text-purple-700">키워드</span>
                      </button>
                    )}
                    {experience.additional_guidelines && (
                      <button
                        onClick={() => scrollToSection('additional-guidelines')}
                        className="w-full text-left flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors group"
                      >
                        <Info className="w-4 h-4 text-gray-600 group-hover:text-gray-700" />
                        <span className="text-sm font-medium text-gray-700 group-hover:text-gray-700">추가 안내사항</span>
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* 신청서 작성 모달 */}
      <ApplicationFormModal
        isOpen={showApplicationModal}
        onClose={() => setShowApplicationModal(false)}
        experience={experience}
        onSuccess={() => {
          setShowApplicationModal(false)
          // 신청 상태 새로고침
          if (user?.user_id) {
            getUserApplications(user.user_id).then(applications => {
              const updatedApplication = applications.find((app: any) => 
                app.experience_id === experience._id
              )
              setUserApplication(updatedApplication)
            })
          }
        }}
      />

      {/* 리뷰 작성 모달 */}
      {showReviewModal && userApplication && (
        <ReviewSubmissionManager
          isOpen={showReviewModal}
          onClose={() => setShowReviewModal(false)}
          onSubmitComplete={() => {
            setShowReviewModal(false)
            // 신청 상태 새로고침
            if (user?.user_id) {
              getUserApplications(user.user_id).then(applications => {
                const updatedApplication = applications.find((app: any) => 
                  app.experience_id === experience._id
                )
                setUserApplication(updatedApplication)
              })
            }
          }}
          applicationId={userApplication._id}
          experienceId={experience._id}
          experienceName={experience.title || experience.experience_name}
        />
      )}
    </div>
  )
}

export default ExperienceDetail
