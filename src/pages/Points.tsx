
import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import { usePoints } from '../hooks/usePoints'
import { DollarSign, TrendingUp, CreditCard, ArrowUpRight, ArrowDownLeft, ExternalLink, Calendar, FileText, Star, CheckCircle, AlertCircle } from 'lucide-react'

const Points: React.FC = () => {
  const navigate = useNavigate()
  const { user } = useAuth()
  const { fetchUserPoints, fetchPointsHistory, userPoints, refreshPointsData, setUserPoints } = usePoints()
  
  // ÏÑ∏Í∏à Í≥ÑÏÇ∞ Ìï®Ïàò
  const calculateTax = (amount: number) => {
    const taxAmount = Math.floor(amount * 0.033) // 3.3% ÏÑ∏Í∏à
    const finalAmount = amount - taxAmount
    return { taxAmount, finalAmount }
  }
  const [pointHistory, setPointHistory] = useState<any[]>([])
  const [withdrawalHistory, setWithdrawalHistory] = useState<any[]>([])
  const [showWithdrawalModal, setShowWithdrawalModal] = useState(false)
  const [withdrawalData, setWithdrawalData] = useState({
    requested_amount: '',
    bank_name: '',
    account_number: '',
    account_holder: ''
  })
  const [previewTax, setPreviewTax] = useState({ taxAmount: 0, finalAmount: 0 })
  const [loading, setLoading] = useState(true)
  const [showCampaignHistoryModal, setShowCampaignHistoryModal] = useState(false)
  const [selectedCampaign, setSelectedCampaign] = useState<any>(null)
  const [campaignHistory, setCampaignHistory] = useState<any[]>([])
  const [showAccountVerificationModal, setShowAccountVerificationModal] = useState(false)
  const [verificationData, setVerificationData] = useState({
    bankAccountId: '',
    depositName: ''
  })

  useEffect(() => {
    if (user) {
      loadData()
    }
  }, [user])

  useEffect(() => {
    // Ï∂úÍ∏à Í∏àÏï° Î≥ÄÍ≤Ω Ïãú ÏÑ∏Í∏à ÎØ∏Î¶¨Î≥¥Í∏∞ Í≥ÑÏÇ∞
    const amount = Number(withdrawalData.requested_amount)
    if (amount > 0) {
      const { taxAmount, finalAmount } = calculateTax(amount)
      setPreviewTax({ taxAmount, finalAmount })
    } else {
      setPreviewTax({ taxAmount: 0, finalAmount: 0 })
    }
  }, [withdrawalData.requested_amount])

  const loadData = async () => {
    if (!user) return
    
    try {
      setLoading(true)
      console.log('üîÑ Ìè¨Ïù∏Ìä∏ ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë:', user.user_id)
      
      // Ï∂úÍ∏à ÎÇ¥Ïó≠ÏùÑ ÏßÅÏ†ë Í∞ÄÏ†∏Ïò§Í∏∞
      const { dataService } = await import('../lib/dataService')
      const userWithdrawals = await dataService.entities.withdrawal_requests.list({
        filter: { user_id: user.user_id }
      })
      
      const [userPointsData, pointsHistory] = await Promise.all([
        fetchUserPoints(user.user_id),
        fetchPointsHistory(user.user_id)
      ])
      
      setPointHistory(pointsHistory)
      setWithdrawalHistory(userWithdrawals)
      
      console.log('‚úÖ Ìè¨Ïù∏Ìä∏ ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å:', {
        userPointsData,
        pointsHistory: pointsHistory.length,
        userWithdrawals: userWithdrawals.length,
        userPoints: userPoints
      })
      
      // üîç ÎîîÎ≤ÑÍπÖ: ÌòÑÏû¨ userPoints ÏÉÅÌÉú ÌôïÏù∏
      console.log('üîç ÌòÑÏû¨ userPoints ÏÉÅÌÉú:', userPoints)
      console.log('üîç userPointsData Î∞òÌôòÍ∞í:', userPointsData)
      
      // üîç Ìè¨Ïù∏Ìä∏ ÌûàÏä§ÌÜ†Î¶¨ÏóêÏÑú Ïã§Ï†ú Ìè¨Ïù∏Ìä∏ Í∏àÏï° ÌôïÏù∏
      const completedPoints = pointsHistory.filter(p => p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å')
      const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
      console.log('üîç ÏôÑÎ£åÎêú Ìè¨Ïù∏Ìä∏ ÌûàÏä§ÌÜ†Î¶¨:', completedPoints)
      console.log('üîç ÏôÑÎ£åÎêú Ìè¨Ïù∏Ìä∏ Ï¥ùÌï©:', totalCompletedPoints)
      
    } catch (error) {
      console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleRefresh = async () => {
    if (!user) return
    
    try {
      console.log('üîÑ Ìè¨Ïù∏Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®')
      
      // Í∞ïÏ†úÎ°ú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      setLoading(true)
      setUserPoints(null)
      setPointHistory([])
      
      // Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      await new Promise(resolve => setTimeout(resolve, 500))
      
      await refreshPointsData(user.user_id)
      await loadData()
      
      console.log('‚úÖ Ìè¨Ïù∏Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å')
    } catch (error) {
      console.error('‚ùå Ìè¨Ïù∏Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleWithdrawalRequest = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!user) return

    const amount = Number(withdrawalData.requested_amount)
    
    try {
      const { dataService } = await import('../lib/dataService')
      
      // 1. Í∏∞Ï°¥ Ïù∏Ï¶ùÎêú Í≥ÑÏ¢åÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
      const existingAccounts = await dataService.entities.bank_accounts.list({
        filter: { user_id: user.user_id }
      })
      
      const verifiedAccount = existingAccounts.find(account => account.is_verified)
      
      if (!verifiedAccount) {
        // Ïù∏Ï¶ùÎêú Í≥ÑÏ¢åÍ∞Ä ÏóÜÏúºÎ©¥ ÌîÑÎ°úÌïÑÎ°ú Ïù¥Îèô
        const shouldGoToProfile = confirm('Ï∂úÍ∏à ÏöîÏ≤≠ÏùÑ ÏúÑÌï¥ÏÑúÎäî Î®ºÏ†Ä Í≥ÑÏ¢åÏù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.\n\nÌîÑÎ°úÌïÑÏóêÏÑú Í≥ÑÏ¢åÏ†ïÎ≥¥Î•º Îì±Î°ùÌïòÍ≥† 1Ïõê Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.\n\nÌîÑÎ°úÌïÑÎ°ú Ïù¥ÎèôÌïòÏãúÍ≤†ÏäµÎãàÍπå?')
        if (shouldGoToProfile) {
          navigate('/profile')
        }
        return
      }

      // 2. Í≥ÑÏ¢å Ï†ïÎ≥¥ Ï†ÄÏû• (Í∏∞Ï°¥ Ïù∏Ï¶ùÎêú Í≥ÑÏ¢å ÏÇ¨Ïö© ÎòêÎäî ÏÉà Í≥ÑÏ¢å)
      let bankAccount = verifiedAccount
      
      // ÏÉàÎ°úÏö¥ Í≥ÑÏ¢å Ï†ïÎ≥¥Í∞Ä ÏûÖÎ†•Îêú Í≤ΩÏö∞ÏóêÎßå ÏÉà Í≥ÑÏ¢å ÏÉùÏÑ±
      if (withdrawalData.bank_name && withdrawalData.account_number && 
          (withdrawalData.bank_name !== verifiedAccount.bank_name || 
           withdrawalData.account_number !== verifiedAccount.account_number)) {
        
        const bankAccountData = {
          user_id: user.user_id,
          bank_name: withdrawalData.bank_name,
          account_number: withdrawalData.account_number,
          account_holder: withdrawalData.account_holder,
          is_verified: false, // ÏÉà Í≥ÑÏ¢åÎäî Ïû¨Ïù∏Ï¶ù ÌïÑÏöî
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
        
        bankAccount = await dataService.entities.bank_accounts.create(bankAccountData)
        
        if (!bankAccount) {
          alert('Í≥ÑÏ¢å Ï†ïÎ≥¥ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
          return
        }
        
        // ÏÉà Í≥ÑÏ¢åÎäî Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïòÎØÄÎ°ú ÏïåÎ¶º
        alert('ÏÉàÎ°úÏö¥ Í≥ÑÏ¢å Ï†ïÎ≥¥Í∞Ä ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§. 1Ïõê Ïù∏Ï¶ùÏùÑ Î®ºÏ†Ä ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.')
        return
      }

      // 3. Ï∂úÍ∏à ÏöîÏ≤≠ ÏÉùÏÑ± (Ïù∏Ï¶ùÎêú Í≥ÑÏ¢åÎ°ú Ï∂úÍ∏à ÏöîÏ≤≠)
      const { taxAmount, finalAmount } = calculateTax(amount)
      const withdrawalRequestData = {
        user_id: user.user_id,
        bank_account_id: bankAccount.id,
        points_amount: amount,
        withdrawal_amount: amount,
        tax_amount: taxAmount,
        final_amount: finalAmount,
        status: 'pending',
        request_reason: 'Ìè¨Ïù∏Ìä∏ Ï∂úÍ∏à ÏöîÏ≤≠ (Í¥ÄÎ¶¨Ïûê ÏäπÏù∏ ÎåÄÍ∏∞)',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
      
      const withdrawalRequest = await dataService.entities.withdrawal_requests.create(withdrawalRequestData)
      
      if (withdrawalRequest) {
        // Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º ÏÉùÏÑ±
        await dataService.entities.admin_notifications.create({
          type: 'withdrawal_requested',
          title: 'ÏÉàÎ°úÏö¥ Ï∂úÍ∏à ÏöîÏ≤≠',
          message: `${user.user_id}ÎãòÏù¥ ${amount.toLocaleString()}P Ï∂úÍ∏àÏùÑ ÏöîÏ≤≠ÌñàÏäµÎãàÎã§.`,
          priority: 'high',
          read: false,
          created_at: new Date().toISOString()
        })
        
        alert(`Ï∂úÍ∏à ÏöîÏ≤≠Ïù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§!\n\nüí¨ Ïπ¥Ïπ¥Ïò§ÌÜ°: @Ïò¨ÎùµÎ≤ÑÌÇ∑\n\nÏù∏Ï¶ùÎêú Í≥ÑÏ¢åÎ°ú Ï∂úÍ∏à ÏöîÏ≤≠Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.\nÍ¥ÄÎ¶¨Ïûê ÏäπÏù∏ ÌõÑ ÏòÅÏóÖÏùº Í∏∞Ï§Ä 3~5Ïùº ÎÇ¥ Ï≤òÎ¶¨Îê©ÎãàÎã§.`)
        
        setShowWithdrawalModal(false)
        setWithdrawalData({
          requested_amount: '',
          bank_name: '',
          account_number: '',
          account_holder: ''
        })
        loadData() // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      } else {
        alert('Ï∂úÍ∏à ÏöîÏ≤≠Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('Ï∂úÍ∏à ÏöîÏ≤≠ Ïò§Î•ò:', error)
      alert('Ï∂úÍ∏à ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  const getStatusBadge = (status: string) => {
    const statusMap = {
      pending: { text: 'ÎåÄÍ∏∞Ï§ë', color: 'bg-yellow-100 text-yellow-800' },
      account_verified: { text: 'Í≥ÑÏ¢åÏù∏Ï¶ùÏôÑÎ£å', color: 'bg-blue-100 text-blue-800' },
      pending_approval: { text: 'ÏäπÏù∏ÎåÄÍ∏∞', color: 'bg-purple-100 text-purple-800' },
      approved: { text: 'ÏäπÏù∏Îê®', color: 'bg-blue-100 text-blue-800' },
      processing: { text: 'Ï≤òÎ¶¨Ï§ë', color: 'bg-purple-100 text-purple-800' },
      completed: { text: 'ÏôÑÎ£å', color: 'bg-green-100 text-green-800' },
      rejected: { text: 'Í±∞Ï†àÎê®', color: 'bg-red-100 text-red-800' }
    }
    return statusMap[status as keyof typeof statusMap] || statusMap.pending
  }

  // 1Ïõê Ïù∏Ï¶ù Ï≤òÎ¶¨
  const handleAccountVerification = async () => {
    if (!verificationData.bankAccountId || !verificationData.depositName.trim()) {
      alert('ÏûÖÍ∏àÏûêÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    try {
      const response = await fetch('/api/account/verify-deposit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user?.user_id,
          bankAccountId: verificationData.bankAccountId,
          depositName: verificationData.depositName
        })
      })

      const result = await response.json()

      if (result.success) {
        alert('Í≥ÑÏ¢å Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!')
        setShowAccountVerificationModal(false)
        setVerificationData({ bankAccountId: '', depositName: '' })
        loadData() // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      } else {
        alert(result.message || 'Í≥ÑÏ¢å Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('Í≥ÑÏ¢å Ïù∏Ï¶ù Ïò§Î•ò:', error)
      alert('Í≥ÑÏ¢å Ïù∏Ï¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  const fetchCampaignHistory = async (campaignId: string | undefined, campaignName: string | undefined) => {
    try {
      console.log('üîç Ï∫†ÌéòÏù∏ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå:', { campaignId, campaignName })
      
      // Ìè¨Ïù∏Ìä∏ ÌûàÏä§ÌÜ†Î¶¨ÏóêÏÑú Ìï¥Îãπ Ï∫†ÌéòÏù∏ Í¥ÄÎ†® ÎÇ¥Ïó≠ Ï°∞Ìöå
      const campaignPointsHistory = pointHistory.filter(p => 
        p.campaign_id === campaignId || 
        p.campaign_name === campaignName ||
        p.description?.includes(campaignName || '') ||
        (campaignName && p.description?.includes(campaignName))
      )
      
      // ÏÇ¨Ïö©Ïûê Ïã†Ï≤≠ ÎÇ¥Ïó≠ Ï°∞Ìöå (dataServiceÎ•º ÌÜµÌï¥)
      const { dataService } = await import('../lib/dataService')
      const userApplications = await dataService.entities.user_applications.list()
      const campaignApplications = userApplications.filter((app: any) => 
        app.campaign_id === campaignId || app.campaign_name === campaignName
      )
      
      // Î¶¨Î∑∞ Ï†úÏ∂ú ÎÇ¥Ïó≠ Ï°∞Ìöå
      const reviewSubmissions = await dataService.entities.review_submissions.list()
      const campaignReviews = reviewSubmissions.filter((review: any) => 
        review.campaign_id === campaignId || review.campaign_name === campaignName
      )
      
      // Î™®Îì† ÌûàÏä§ÌÜ†Î¶¨Î•º ÎÇ†ÏßúÏàúÏúºÎ°ú Ï†ïÎ†¨
      const allHistory = [
        ...campaignPointsHistory.map(p => ({
          type: 'point',
          date: p.created_at,
          title: p.description,
          status: p.payment_status || p.status,
          details: `${p.points_amount || 0}P ${p.points_type === 'earned' ? 'Ï†ÅÎ¶Ω' : 'Ï∞®Í∞ê'}`,
          icon: p.points_type === 'earned' ? ArrowDownLeft : ArrowUpRight,
          color: p.points_type === 'earned' ? 'text-green-500' : 'text-red-500'
        })),
        ...campaignApplications.map((app: any) => ({
          type: 'application',
          date: app.created_at,
          title: 'Ï≤¥ÌóòÎã® Ïã†Ï≤≠',
          status: app.status,
          details: `Ïã†Ï≤≠ ÏÉÅÌÉú: ${app.status}`,
          icon: FileText,
          color: 'text-blue-500'
        })),
        ...campaignReviews.map((review: any) => ({
          type: 'review',
          date: review.created_at,
          title: 'Î¶¨Î∑∞ Ï†úÏ∂ú',
          status: review.status,
          details: review.review_content ? `Î¶¨Î∑∞: ${review.review_content.substring(0, 50)}...` : 'Î¶¨Î∑∞ Ï†úÏ∂ú ÏôÑÎ£å',
          icon: Star,
          color: 'text-purple-500'
        }))
      ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      
      setCampaignHistory(allHistory)
      setSelectedCampaign({ id: campaignId, name: campaignName })
      setShowCampaignHistoryModal(true)
      
      console.log('‚úÖ Ï∫†ÌéòÏù∏ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå ÏôÑÎ£å:', allHistory)
    } catch (error) {
      console.error('‚ùå Ï∫†ÌéòÏù∏ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå Ïã§Ìå®:', error)
    }
  }

  if (!user) {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center py-12">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§</h2>
          <p className="text-gray-600">Ìè¨Ïù∏Ìä∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÎ†§Î©¥ Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî</p>
        </div>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Ìè¨Ïù∏Ìä∏</h1>
            <p className="text-gray-600">
              Ï≤¥ÌóòÎã® ÌôúÎèôÏúºÎ°ú Ï†ÅÎ¶ΩÌïú Ìè¨Ïù∏Ìä∏Î•º Í¥ÄÎ¶¨ÌïòÍ≥† Ï∂úÍ∏àÌïòÏÑ∏Ïöî
            </p>
          </div>
          <button
            onClick={handleRefresh}
            className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center gap-2"
          >
            <ArrowUpRight className="w-4 h-4" />
            ÏÉàÎ°úÍ≥†Ïπ®
          </button>
        </div>
      </div>

      {/* Ìè¨Ïù∏Ìä∏ ÏöîÏïΩ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center">
            <DollarSign className="w-8 h-8 text-green-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">ÌòÑÏû¨ ÏûîÏï°</p>
              <p className="text-2xl font-bold text-gray-900">
                {(() => {
                  // Ìè¨Ïù∏Ìä∏ ÌûàÏä§ÌÜ†Î¶¨ÏóêÏÑú Ïã§Ï†ú ÏßÄÍ∏â ÏôÑÎ£åÎêú Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞
                  const completedPoints = pointHistory.filter(p => 
                    p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å'
                  )
                  const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
                  
                  // Ï∂úÍ∏àÎêú Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞
                  const withdrawnPoints = pointHistory.filter(p => 
                    p.points_type === 'withdrawn' || p.payment_status === 'Ï∂úÍ∏àÏôÑÎ£å'
                  )
                  const totalWithdrawnPoints = withdrawnPoints.reduce((sum, p) => sum + Math.abs(p.points_amount || 0), 0)
                  
                  const availablePoints = Math.max(0, totalCompletedPoints - totalWithdrawnPoints)
                  
                  console.log('üîç Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞:', {
                    totalCompletedPoints,
                    totalWithdrawnPoints,
                    availablePoints,
                    userPointsAvailable: userPoints?.available_points,
                    userPointsTotal: userPoints?.total_points
                  })
                  
                  return availablePoints.toLocaleString()
                })()}P
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Ï∂úÍ∏à Í∞ÄÎä•Ìïú Ìè¨Ïù∏Ìä∏
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center">
            <TrendingUp className="w-8 h-8 text-blue-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Ï¥ù Ï†ÅÎ¶Ω</p>
              <p className="text-2xl font-bold text-gray-900">
                {(() => {
                  // Ìè¨Ïù∏Ìä∏ ÌûàÏä§ÌÜ†Î¶¨ÏóêÏÑú Ïã§Ï†ú ÏßÄÍ∏â ÏôÑÎ£åÎêú Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞
                  const completedPoints = pointHistory.filter(p => 
                    p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å'
                  )
                  const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
                  
                  return totalCompletedPoints.toLocaleString()
                })()}P
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Ï∂úÍ∏àÌï¥ÎèÑ Ïú†ÏßÄÎêòÎäî ÎàÑÏ†Å Ìè¨Ïù∏Ìä∏
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border">
          <div className="flex items-center">
            <CreditCard className="w-8 h-8 text-purple-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Ï≤¥ÌóòÎã® Ï∞∏Ïó¨</p>
              <p className="text-2xl font-bold text-gray-900">
                {userPoints?.experience_count || 0}Ìöå
              </p>
              <p className="text-xs text-gray-500 mt-1">
                ÏôÑÎ£åÎêú Ï≤¥ÌóòÎã® Ïàò
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Ï∂úÍ∏à Î≤ÑÌäº */}
      <div className="mb-8">
        <button
          onClick={async () => {
            if (!user) return
            
            try {
              // Í∏∞Ï°¥ Ïù∏Ï¶ùÎêú Í≥ÑÏ¢å Ï†ïÎ≥¥ Î°úÎìú
              const { dataService } = await import('../lib/dataService')
              const existingAccounts = await dataService.entities.bank_accounts.list({
                filter: { user_id: user.user_id }
              })
              
              const verifiedAccount = existingAccounts.find(account => account.is_verified)
              
              if (verifiedAccount) {
                // Ïù∏Ï¶ùÎêú Í≥ÑÏ¢åÍ∞Ä ÏûàÏúºÎ©¥ Í∏∞Ï°¥ Ï†ïÎ≥¥Î°ú ÏÑ§Ï†ï
                setWithdrawalData({
                  requested_amount: '',
                  bank_name: verifiedAccount.bank_name,
                  account_number: verifiedAccount.account_number,
                  account_holder: verifiedAccount.account_holder
                })
              } else {
                // Ïù∏Ï¶ùÎêú Í≥ÑÏ¢åÍ∞Ä ÏóÜÏúºÎ©¥ Îπà ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
                setWithdrawalData({
                  requested_amount: '',
                  bank_name: '',
                  account_number: '',
                  account_holder: ''
                })
              }
              
              setShowWithdrawalModal(true)
            } catch (error) {
              console.error('Í≥ÑÏ¢å Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', error)
              setShowWithdrawalModal(true)
            }
          }}
          disabled={(() => {
            const completedPoints = pointHistory.filter(p => 
              p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å'
            )
            const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
            
            const withdrawnPoints = pointHistory.filter(p => 
              p.points_type === 'withdrawn' || p.payment_status === 'Ï∂úÍ∏àÏôÑÎ£å'
            )
            const totalWithdrawnPoints = withdrawnPoints.reduce((sum, p) => sum + Math.abs(p.points_amount || 0), 0)
            
            const availablePoints = Math.max(0, totalCompletedPoints - totalWithdrawnPoints)
            return availablePoints < 1000
          })()}
          className="bg-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2">
          <ArrowUpRight className="w-5 h-5" />
          <span>Ìè¨Ïù∏Ìä∏ Ï∂úÍ∏à</span>
        </button>
        {(() => {
          const completedPoints = pointHistory.filter(p => 
            p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å'
          )
          const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
          
          const withdrawnPoints = pointHistory.filter(p => 
            p.points_type === 'withdrawn' || p.payment_status === 'Ï∂úÍ∏àÏôÑÎ£å'
          )
          const totalWithdrawnPoints = withdrawnPoints.reduce((sum, p) => sum + Math.abs(p.points_amount || 0), 0)
          
          const availablePoints = Math.max(0, totalCompletedPoints - totalWithdrawnPoints)
          return availablePoints < 1000
        })() && (
          <p className="text-sm text-gray-500 mt-2">
            ÏµúÏÜå Ï∂úÍ∏à Í∏àÏï°ÏùÄ 1,000PÏûÖÎãàÎã§
          </p>
        )}
      </div>
      {/* Ï∂úÍ∏à ÎÇ¥Ïó≠ */}
      {withdrawalHistory.length > 0 ? (
        <div className="bg-white rounded-xl shadow-sm border mb-8">
          <div className="p-6 border-b">
            <h2 className="text-xl font-bold text-gray-900">Ï∂úÍ∏à ÎÇ¥Ïó≠</h2>
          </div>
          <div className="divide-y">
            {withdrawalHistory.map((withdrawal) => (
              <div key={withdrawal._id} className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3">
                      <ArrowUpRight className="w-5 h-5 text-red-500" />
                      <div>
                        <h3 className="font-medium text-gray-900">
                          {withdrawal.bank_name} {withdrawal.account_number}
                        </h3>
                        <p className="text-sm text-gray-600">
                          ÏòàÍ∏àÏ£º: {withdrawal.account_holder}
                        </p>
                        <div className="text-sm text-gray-500 mt-1">
                          ÏöîÏ≤≠: {withdrawal.requested_amount?.toLocaleString()}Ïõê | 
                          ÏÑ∏Í∏à: {withdrawal.tax_amount?.toLocaleString()}Ïõê | 
                          Ïã§ÏßÄÍ∏â: {withdrawal.final_amount?.toLocaleString()}Ïõê
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusBadge(withdrawal.status).color}`}>
                      {getStatusBadge(withdrawal.status).text}
                    </span>
                    <p className="text-sm text-gray-500 mt-1">
                      {new Date(withdrawal.created_at).toLocaleDateString()}
                    </p>
                    {withdrawal.status === 'pending' && (
                      <button
                        onClick={() => {
                          setVerificationData({
                            bankAccountId: withdrawal.bank_account_id || '',
                            depositName: ''
                          })
                          setShowAccountVerificationModal(true)
                        }}
                        className="mt-2 px-3 py-1 bg-blue-500 text-white text-xs rounded-lg hover:bg-blue-600"
                      >
                        1Ïõê Ïù∏Ï¶ù
                      </button>
                    )}
                  </div>
                </div>
                {withdrawal.admin_note && (
                  <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                    <p className="text-sm text-gray-600">
                      <strong>Í¥ÄÎ¶¨Ïûê Î©îÎ™®:</strong> {withdrawal.admin_note}
                    </p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      ) : null}

      {/* Ìè¨Ïù∏Ìä∏ Í±∞Îûò ÎÇ¥Ïó≠ */}
      <div className="bg-white rounded-xl shadow-sm border">
        <div className="p-6 border-b">
          <h2 className="text-xl font-bold text-gray-900">Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠</h2>
        </div>
        <div className="divide-y">
          {pointHistory.length > 0 ? (
            pointHistory.map((point) => (
              <div key={point._id} className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    {point.points_type === 'earned' ? (
                      <ArrowDownLeft className="w-5 h-5 text-green-500" />
                    ) : (
                      <ArrowUpRight className="w-5 h-5 text-red-500" />
                    )}
                    <div>
                      <h3 
                        className={`font-medium text-gray-900 ${(point.campaign_id || point.campaign_name || point.description?.includes('Ï∫†ÌéòÏù∏')) ? 'cursor-pointer hover:text-blue-600 hover:underline' : ''}`}
                        onClick={() => {
                          console.log('üîç Ìè¨Ïù∏Ìä∏ Ï†úÎ™© ÌÅ¥Î¶≠:', {
                            description: point.description,
                            campaign_id: point.campaign_id,
                            campaign_name: point.campaign_name,
                            point: point
                          })
                          
                          // campaign_idÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÌïòÍ≥†, ÏóÜÏúºÎ©¥ descriptionÏóêÏÑú Ï∫†ÌéòÏù∏ Ïù¥Î¶Ñ Ï∂îÏ∂ú
                          let campaignId = point.campaign_id
                          let campaignName = point.campaign_name
                          
                          if (!campaignId && !campaignName) {
                            // descriptionÏóêÏÑú Ï∫†ÌéòÏù∏ Ïù¥Î¶Ñ Ï∂îÏ∂ú ÏãúÎèÑ
                            const match = point.description.match(/Ï∫†ÌéòÏù∏ "([^"]+)"/)
                            if (match) {
                              campaignName = match[1]
                              console.log('üîç descriptionÏóêÏÑú Ï∂îÏ∂úÌïú Ï∫†ÌéòÏù∏ Ïù¥Î¶Ñ:', campaignName)
                            }
                          }
                          
                          if (campaignId || campaignName) {
                            fetchCampaignHistory(campaignId, campaignName)
                          } else {
                            console.log('‚ùå campaign_idÏôÄ campaign_nameÏù¥ Î™®Îëê ÏóÜÏäµÎãàÎã§')
                          }
                        }}
                      >
                        {point.description}
                      </h3>
                      {point.campaign_name && (
                        <div className="flex items-center space-x-2">
                          <p 
                            className={`text-sm text-gray-600 ${point.campaign_id ? 'cursor-pointer hover:text-blue-600 hover:underline' : ''}`}
                            onClick={() => {
                              if (point.campaign_id) {
                                fetchCampaignHistory(point.campaign_id, point.campaign_name)
                              }
                            }}
                          >
                            Ï∫†ÌéòÏù∏: {point.campaign_name}
                          </p>
                          {point.campaign_id && (
                            <button
                              onClick={() => navigate(`/campaigns/${point.campaign_id}`)}
                              className="text-blue-500 hover:text-blue-700 transition-colors"
                              title="Ï∫†ÌéòÏù∏ ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô"
                            >
                              <ExternalLink className="w-4 h-4" />
                            </button>
                          )}
                        </div>
                      )}
                      <div className="flex items-center space-x-2 mt-1">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          point.payment_status === 'completed' ? 'bg-green-100 text-green-800' :
                          point.payment_status === 'approved' ? 'bg-purple-100 text-purple-800' :
                          point.payment_status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                          point.payment_status === 'failed' ? 'bg-red-100 text-red-800' :
                          point.status === 'success' ? 'bg-green-100 text-green-800' :
                          point.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                          point.status === 'failed' ? 'bg-red-100 text-red-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {point.payment_status === 'completed' ? 'Ìè¨Ïù∏Ìä∏ ÏßÄÍ∏â ÏôÑÎ£å' :
                           point.payment_status === 'approved' ? 'Ìè¨Ïù∏Ìä∏ ÏßÄÍ∏â ÏäπÏù∏' :
                           point.payment_status === 'pending' ? 'ÎåÄÍ∏∞Ï§ë' :
                           point.payment_status === 'failed' ? 'Ïã§Ìå®' :
                           point.payment_status || 
                           (point.status === 'success' ? 'ÏôÑÎ£å' :
                            point.status === 'pending' ? 'ÎåÄÍ∏∞Ï§ë' :
                            point.status === 'failed' ? 'Ïã§Ìå®' : 'Ïïå Ïàò ÏóÜÏùå')}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className={`text-lg font-bold ${
                      point.points_type === 'earned' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {point.points_type === 'earned' ? '+' : ''}{(point.points_amount || point.points || 0).toLocaleString()}P
                    </p>
                    <p className="text-sm text-gray-500">
                      {new Date(point.created_at).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="p-8 text-center text-gray-500">
              <p>Ìè¨Ïù∏Ìä∏ Í±∞Îûò ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§</p>
            </div>
          )}
        </div>
      </div>

      {/* Ï∂úÍ∏à ÏöîÏ≤≠ Î™®Îã¨ */}
      {showWithdrawalModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-md w-full">
            <div className="p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-4">Ìè¨Ïù∏Ìä∏ Ï∂úÍ∏à</h2>
              
              {/* Í≥ÑÏ¢åÏù∏Ï¶ù ÏïàÎÇ¥ */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <CreditCard className="w-5 h-5 text-blue-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-blue-800 mb-1">
                      Í≥ÑÏ¢åÏù∏Ï¶ù ÌïÑÏàò ÏïàÎÇ¥
                    </h3>
                    <p className="text-sm text-blue-700">
                      Ï∂úÍ∏à ÏöîÏ≤≠ÏùÑ ÏúÑÌï¥ÏÑúÎäî Î®ºÏ†Ä Í≥ÑÏ¢åÏù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
                    </p>
                    <ul className="text-xs text-blue-600 mt-2 space-y-1">
                      <li>‚Ä¢ 1Ïõê Ïù∏Ï¶ùÏùÑ ÌÜµÌï¥ Í≥ÑÏ¢å ÏÜåÏú†Ïûê Î≥∏Ïù∏ ÌôïÏù∏</li>
                      <li>‚Ä¢ Ïù∏Ï¶ù ÏôÑÎ£å ÌõÑ Ï∂úÍ∏à ÏöîÏ≤≠ Í∞ÄÎä•</li>
                      <li>‚Ä¢ ÏÉàÎ°úÏö¥ Í≥ÑÏ¢å ÏûÖÎ†• Ïãú Ïû¨Ïù∏Ï¶ù ÌïÑÏöî</li>
                    </ul>
                  </div>
                </div>
              </div>
              
              <form onSubmit={handleWithdrawalRequest} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Ï∂úÍ∏à Í∏àÏï°
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      required
                      min="1000"
                      max={(() => {
                        const completedPoints = pointHistory.filter(p => 
                          p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å'
                        )
                        const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
                        
                        const withdrawnPoints = pointHistory.filter(p => 
                          p.points_type === 'withdrawn' || p.payment_status === 'Ï∂úÍ∏àÏôÑÎ£å'
                        )
                        const totalWithdrawnPoints = withdrawnPoints.reduce((sum, p) => sum + Math.abs(p.points_amount || 0), 0)
                        
                        return Math.max(0, totalCompletedPoints - totalWithdrawnPoints)
                      })()}
                      value={withdrawalData.requested_amount}
                      onChange={(e) => setWithdrawalData(prev => ({ ...prev, requested_amount: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                      placeholder="1000"
                    />
                    <span className="absolute right-3 top-2 text-gray-500">P</span>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Ï∂úÍ∏à Í∞ÄÎä•: {(() => {
                      const completedPoints = pointHistory.filter(p => 
                        p.payment_status === 'completed' || p.payment_status === 'ÏßÄÍ∏âÏôÑÎ£å'
                      )
                      const totalCompletedPoints = completedPoints.reduce((sum, p) => sum + (p.points_amount || 0), 0)
                      
                      const withdrawnPoints = pointHistory.filter(p => 
                        p.points_type === 'withdrawn' || p.payment_status === 'Ï∂úÍ∏àÏôÑÎ£å'
                      )
                      const totalWithdrawnPoints = withdrawnPoints.reduce((sum, p) => sum + Math.abs(p.points_amount || 0), 0)
                      
                      const availablePoints = Math.max(0, totalCompletedPoints - totalWithdrawnPoints)
                      return availablePoints.toLocaleString()
                    })()}P (ÏµúÏÜå 1,000P)
                  </p>
                </div>
                {/* ÏÑ∏Í∏à ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                {previewTax.finalAmount > 0 && (
                  <div className="bg-purple-50 p-3 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-2">Ï∂úÍ∏à Ï†ïÎ≥¥</h4>
                    <div className="text-sm space-y-1">
                      <div className="flex justify-between">
                        <span>ÏöîÏ≤≠ Í∏àÏï°:</span>
                        <span>{Number(withdrawalData.requested_amount).toLocaleString()}Ïõê</span>
                      </div>
                      <div className="flex justify-between text-red-600">
                        <span>ÏÑ∏Í∏à (3.3%):</span>
                        <span>-{previewTax.taxAmount.toLocaleString()}Ïõê</span>
                      </div>
                      <div className="flex justify-between font-bold border-t pt-1">
                        <span>Ïã§ÏßÄÍ∏âÏï°:</span>
                        <span>{previewTax.finalAmount.toLocaleString()}Ïõê</span>
                      </div>
                    </div>
                  </div>
                )}

                {/* Í≥ÑÏ¢å Ï†ïÎ≥¥ ÏÑπÏÖò */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-medium text-gray-900">ÏûÖÍ∏à Í≥ÑÏ¢å Ï†ïÎ≥¥</h3>
                    <button
                      type="button"
                      onClick={() => navigate('/profile')}
                      className="text-sm text-blue-600 hover:text-blue-800 underline"
                    >
                      Í≥ÑÏ¢å Ï†ïÎ≥¥ Î≥ÄÍ≤Ω
                    </button>
                  </div>
                  
                  {withdrawalData.bank_name ? (
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <div className="flex items-center mb-2">
                        <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                        <span className="text-sm font-medium text-green-800">Ïù∏Ï¶ùÎêú Í≥ÑÏ¢å</span>
                      </div>
                      <div className="space-y-1 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">ÏùÄÌñâ:</span>
                          <span className="font-medium">{withdrawalData.bank_name}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Í≥ÑÏ¢åÎ≤àÌò∏:</span>
                          <span className="font-medium">{withdrawalData.account_number}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">ÏòàÍ∏àÏ£º:</span>
                          <span className="font-medium">{withdrawalData.account_holder}</span>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <div className="flex items-center mb-2">
                        <AlertCircle className="w-5 h-5 text-yellow-600 mr-2" />
                        <span className="text-sm font-medium text-yellow-800">Í≥ÑÏ¢å Ï†ïÎ≥¥ ÏóÜÏùå</span>
                      </div>
                      <p className="text-sm text-yellow-700 mb-3">
                        Ï∂úÍ∏àÏùÑ ÏúÑÌï¥ÏÑúÎäî Î®ºÏ†Ä Í≥ÑÏ¢åÏù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.
                      </p>
                      <button
                        type="button"
                        onClick={() => {
                          setShowWithdrawalModal(false)
                          navigate('/profile')
                        }}
                        className="w-full bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700 transition-colors"
                      >
                        ÌîÑÎ°úÌïÑÏóêÏÑú Í≥ÑÏ¢å Îì±Î°ùÌïòÍ∏∞
                      </button>
                    </div>
                  )}
                </div>

                {/* Í≥ÑÏ¢åÏù∏Ï¶ù ÏïàÎÇ¥ */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <CreditCard className="w-5 h-5 text-blue-600 mt-0.5" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-blue-900 mb-2">Í≥ÑÏ¢åÏù∏Ï¶ù ÏïàÎÇ¥</h4>
                      <ul className="text-xs text-blue-800 space-y-1">
                        <li>‚Ä¢ Î≥∏Ïù∏ Î™ÖÏùò Í≥ÑÏ¢åÎßå Ï∂úÍ∏à Í∞ÄÎä•Ìï©ÎãàÎã§</li>
                        <li>‚Ä¢ Ï∂úÍ∏à ÏöîÏ≤≠ ÌõÑ 1ÏõêÏù¥ ÏûÖÍ∏àÎêòÏñ¥ Í≥ÑÏ¢åÏù∏Ï¶ùÏùÑ ÏßÑÌñâÌï©ÎãàÎã§</li>
                        <li>‚Ä¢ ÏûÖÍ∏àÏûêÎ™ÖÏùÑ Ï†ïÌôïÌûà ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* Ï∂úÍ∏à ÏïàÎÇ¥ */}
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <Calendar className="w-5 h-5 text-green-600 mt-0.5" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-green-900 mb-2">Ï∂úÍ∏à Ï≤òÎ¶¨ ÏïàÎÇ¥</h4>
                      <ul className="text-xs text-green-800 space-y-1">
                        <li>‚Ä¢ Ï∂úÍ∏à ÏöîÏ≤≠ ÌõÑ ÏòÅÏóÖÏùº Í∏∞Ï§Ä 3~5Ïùº ÎÇ¥ Ï≤òÎ¶¨Îê©ÎãàÎã§</li>
                        <li>‚Ä¢ ÏäπÏù∏ ÌõÑ Í≥ÑÏ¢åÎ°ú ÏûÖÍ∏àÎê©ÎãàÎã§</li>
                        <li>‚Ä¢ Ï≤òÎ¶¨ ÌòÑÌô©ÏùÄ Ïñ¥ÎìúÎØº ÌéòÏù¥ÏßÄÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•Ìï©ÎãàÎã§</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* Í≥†Í∞ùÏÑºÌÑ∞ Ï†ïÎ≥¥ */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <FileText className="w-5 h-5 text-gray-600 mt-0.5" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 mb-2">Í≥†Í∞ùÏÑºÌÑ∞</h4>
                      <div className="text-xs text-gray-700 space-y-1">
                        <div>üìß Ïù¥Î©îÏùº: support@allthingbucket.com</div>
                        <div>üí¨ Ïπ¥Ïπ¥Ïò§ÌÜ°: @Ïò¨ÎùµÎ≤ÑÌÇ∑ (24ÏãúÍ∞Ñ Î¨∏Ïùò Í∞ÄÎä•)</div>
                        <div className="mt-2 text-gray-600">
                          Î¨∏ÏùòÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÏãúÎ©¥ Ïñ∏Ï†úÎì† Ïó∞ÎùΩÏ£ºÏÑ∏Ïöî!
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="flex space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowWithdrawalModal(false)
                      setWithdrawalData({
                        requested_amount: '',
                        bank_name: '',
                        account_number: '',
                        account_holder: ''
                      })
                    }}
                    className="flex-1 bg-gray-100 text-gray-700 py-2 px-4 rounded-lg font-medium hover:bg-gray-200"
                  >
                    Ï∑®ÏÜå
                  </button>
                  <button
                    type="submit"
                    disabled={!withdrawalData.bank_name}
                    className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Ï∂úÍ∏à ÏöîÏ≤≠
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Ï∫†ÌéòÏù∏ ÌûàÏä§ÌÜ†Î¶¨ Î™®Îã¨ */}
      {showCampaignHistoryModal && selectedCampaign && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-2xl w-full max-h-[80vh] overflow-hidden">
            <div className="p-6 border-b">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-xl font-bold text-gray-900">Ï∫†ÌéòÏù∏ ÌûàÏä§ÌÜ†Î¶¨</h2>
                  <p className="text-sm text-gray-600 mt-1">{selectedCampaign.name}</p>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => navigate(`/campaigns/${selectedCampaign.id}`)}
                    className="px-3 py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-1 text-sm"
                  >
                    <ExternalLink className="w-4 h-4" />
                    <span>ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄ</span>
                  </button>
                  <button
                    onClick={() => setShowCampaignHistoryModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    ‚úï
                  </button>
                </div>
              </div>
            </div>
            
            <div className="p-6 overflow-y-auto max-h-[60vh]">
              {campaignHistory.length > 0 ? (
                <div className="space-y-4">
                  {campaignHistory.map((history, index) => {
                    const IconComponent = history.icon
                    return (
                      <div key={index} className="flex items-start space-x-3 p-4 bg-gray-50 rounded-lg">
                        <div className={`p-2 rounded-full ${history.color} bg-opacity-20`}>
                          <IconComponent className={`w-4 h-4 ${history.color}`} />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h3 className="font-medium text-gray-900">{history.title}</h3>
                            <span className="text-xs text-gray-500">
                              {new Date(history.date).toLocaleDateString('ko-KR', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                              })}
                            </span>
                          </div>
                          <p className="text-sm text-gray-600 mt-1">{history.details}</p>
                          <div className="mt-2">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              history.status === 'completed' || history.status === 'ÏßÄÍ∏âÏôÑÎ£å' ? 'bg-green-100 text-green-800' :
                              history.status === 'approved' || history.status === 'ÏäπÏù∏Îê®' ? 'bg-blue-100 text-blue-800' :
                              history.status === 'pending' || history.status === 'ÎåÄÍ∏∞Ï§ë' ? 'bg-yellow-100 text-yellow-800' :
                              history.status === 'rejected' || history.status === 'Í±∞Ï†àÎê®' ? 'bg-red-100 text-red-800' :
                              'bg-gray-100 text-gray-800'
                            }`}>
                              {history.status === 'completed' ? 'ÏôÑÎ£å' :
                               history.status === 'ÏßÄÍ∏âÏôÑÎ£å' ? 'ÏßÄÍ∏âÏôÑÎ£å' :
                               history.status === 'approved' ? 'ÏäπÏù∏Îê®' :
                               history.status === 'pending' ? 'ÎåÄÍ∏∞Ï§ë' :
                               history.status === 'rejected' ? 'Í±∞Ï†àÎê®' :
                               history.status || 'Ïïå Ïàò ÏóÜÏùå'}
                            </span>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Calendar className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>Ï∫†ÌéòÏù∏ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* 1Ïõê Ïù∏Ï¶ù Î™®Îã¨ */}
      {showAccountVerificationModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-md w-full">
            <div className="p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-4">1Ïõê Í≥ÑÏ¢åÏù∏Ï¶ù</h2>
              
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">Ïù∏Ï¶ù Î∞©Î≤ï</h4>
                  <ol className="text-sm text-blue-800 space-y-1">
                    <li>1. Í≥ÑÏ¢åÎ°ú 1ÏõêÏùÑ ÏûÖÍ∏àÌï¥Ï£ºÏÑ∏Ïöî</li>
                    <li>2. ÏûÖÍ∏àÏûêÎ™Ö: <strong>Ïò¨ÎùµÎ≤ÑÌÇ∑</strong></li>
                    <li>3. ÏûÖÍ∏à ÌõÑ ÏïÑÎûòÏóê ÏûÖÍ∏àÏûêÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</li>
                  </ol>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ÏûÖÍ∏àÏûêÎ™Ö ÌôïÏù∏
                  </label>
                  <input
                    type="text"
                    required
                    value={verificationData.depositName}
                    onChange={(e) => setVerificationData(prev => ({ ...prev, depositName: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    placeholder="ÏûÖÍ∏àÏûêÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Ï†ïÌôïÌïú ÏûÖÍ∏àÏûêÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ïïº Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎê©ÎãàÎã§.
                  </p>
                </div>

                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <FileText className="w-5 h-5 text-green-600 mt-0.5" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-green-900 mb-1">Í≥†Í∞ùÏÑºÌÑ∞</h4>
                      <div className="text-xs text-green-800 space-y-1">
                        <div>üìû Ï†ÑÌôî: 1588-0000 (ÌèâÏùº 09:00-18:00)</div>
                        <div>üí¨ Ïπ¥Ïπ¥Ïò§ÌÜ°: @Ïò¨ÎùµÎ≤ÑÌÇ∑</div>
                        <div>üìß Ïù¥Î©îÏùº: support@allthingbucket.com</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex space-x-3 pt-6">
                <button
                  type="button"
                  onClick={() => {
                    setShowAccountVerificationModal(false)
                    setVerificationData({ bankAccountId: '', depositName: '' })
                  }}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  onClick={handleAccountVerification}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Ïù∏Ï¶ù ÏôÑÎ£å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Points
